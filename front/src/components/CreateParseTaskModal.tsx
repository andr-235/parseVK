import { useEffect, useMemo, useState } from 'react'
import type { Group } from '../types'

interface CreateParseTaskModalProps {
  isOpen: boolean
  groups: Group[]
  isLoading: boolean
  onClose: () => void
  onSubmit: (groupIds: Array<number | string>) => void
}

const getDisplayName = (group: Group): string => {
  if (group.name && group.name.trim() !== '') {
    return group.name
  }

  if (group.screenName && group.screenName.trim() !== '') {
    return group.screenName
  }

  if (typeof group.vkId === 'number') {
    return '–ì—Ä—É–ø–ø–∞ ' + group.vkId
  }

  return '–ì—Ä—É–ø–ø–∞ ' + group.id
}

function CreateParseTaskModal({ isOpen, groups, isLoading, onClose, onSubmit }: CreateParseTaskModalProps) {
  const [selectedIds, setSelectedIds] = useState<Set<number | string>>(new Set())
  const [search, setSearch] = useState('')

  useEffect(() => {
    if (!isOpen) {
      setSelectedIds(new Set())
      setSearch('')
      return
    }

    setSelectedIds(new Set(groups.map((group) => group.id)))
  }, [isOpen, groups])

  const filteredGroups = useMemo(() => {
    if (!search.trim()) {
      return groups
    }

    const normalized = search.toLowerCase()
    return groups.filter((group) => {
      const display = getDisplayName(group).toLowerCase()
      const vkId = group.vkId ? String(group.vkId) : ''
      const id = String(group.id)
      return display.includes(normalized) || vkId.includes(normalized) || id.includes(normalized)
    })
  }, [groups, search])

  const handleToggle = (groupId: number | string) => {
    setSelectedIds((prev) => {
      const updated = new Set(prev)
      if (updated.has(groupId)) {
        updated.delete(groupId)
      } else {
        updated.add(groupId)
      }
      return updated
    })
  }

  const handleSelectAll = () => {
    setSelectedIds(new Set(groups.map((group) => group.id)))
  }

  const handleDeselectAll = () => {
    setSelectedIds(new Set())
  }

  const handleSubmit = () => {
    const ids = Array.from(selectedIds)
    onSubmit(ids)
  }

  if (!isOpen) {
    return null
  }

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div
        className="modal-content modal-content--enhanced"
        role="dialog"
        aria-modal="true"
        aria-labelledby="create-parse-modal-title"
        onClick={(event) => event.stopPropagation()}
      >
        <div className="modal-header">
          <div className="modal-title">
            <h2 id="create-parse-modal-title">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø</h2>
            <p>
              –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –ø–æ–º–æ—â—å—é –ø–æ–∏—Å–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ú—ã —Å—Ä–∞–∑—É –ø–æ–¥—Å—á–∏—Ç–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
              —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥—Å–∫–∞–∂–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å.
            </p>
          </div>
          <button
            type="button"
            className="modal-close"
            onClick={onClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
          >
            <span aria-hidden="true">√ó</span>
          </button>
        </div>
        <div className="modal-body">
          <div className="modal-body-top">
            <div className="selection-summary" role="status" aria-live="polite">
              <div className="selection-summary__count">{selectedIds.size}</div>
              <div className="selection-summary__text">
                <span className="selection-summary__label">–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø</span>
                <span className="selection-summary__meta">
                  –∏–∑ {groups.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ‚Ä¢ –Ω–∞–π–¥–µ–Ω–æ {filteredGroups.length}
                </span>
              </div>
            </div>
            <div className="selection-actions">
              <button type="button" className="chip-button" onClick={handleSelectAll}>
                –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
              </button>
              <button type="button" className="chip-button chip-button--ghost" onClick={handleDeselectAll}>
                –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
              </button>
            </div>
          </div>

          <div className="group-selection-header">
            <div className="input-with-icon">
              <span className="input-icon" aria-hidden="true">
                üîç
              </span>
              <input
                type="text"
                className="group-search-input"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Å—Å—ã–ª–∫–µ –∏–ª–∏ ID"
                value={search}
                onChange={(event) => setSearch(event.target.value)}
              />
            </div>
            <p className="group-selection-hint">
              –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.
            </p>
          </div>

          <div className="group-selection-list">
            {filteredGroups.length === 0 ? (
              <div className="empty-state">
                <h3>–ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä—É–ø–ø</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã–±–æ—Ä–∞.</p>
              </div>
            ) : (
              filteredGroups.map((group) => {
                const displayName = getDisplayName(group)
                const isChecked = selectedIds.has(group.id)

                return (
                  <label key={group.id} className="group-selection-item">
                    <input
                      type="checkbox"
                      checked={isChecked}
                      onChange={() => handleToggle(group.id)}
                    />
                    <div className="group-info">
                      <span className="group-name">{displayName}</span>
                      {group.vkId ? <span className="group-meta">{'vk.com/club' + group.vkId}</span> : null}
                    </div>
                  </label>
                )
              })
            )}
          </div>
        </div>
        <div className="modal-footer">
          <button type="button" className="button secondary" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="button"
            className="button"
            onClick={handleSubmit}
            disabled={isLoading || selectedIds.size === 0}
          >
            {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å (' + selectedIds.size + ')'}
          </button>
        </div>
      </div>
    </div>
  )
}

export default CreateParseTaskModal
