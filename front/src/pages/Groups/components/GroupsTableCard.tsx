import { useMemo } from 'react'
import type { ReactNode } from 'react'
import Button from '../../../components/Button'
import Table from '../../../components/Table'
import type { Group, TableColumn } from '../../../types'
import styles from './GroupsTableCard.module.css'

type ColumnsFactory = (deleteGroup: (id: number) => void) => TableColumn[]

interface GroupsTableCardProps {
  groups: Group[]
  isLoading: boolean
  onClear: () => void | Promise<void>
  onDelete: (id: number) => void
  columns: ColumnsFactory
}

const getCounterLabel = (count: number) => {
  const remainder10 = count % 10
  const remainder100 = count % 100

  if (remainder10 === 1 && remainder100 !== 11) {
    return '–≥—Ä—É–ø–ø–∞'
  }

  if (remainder10 >= 2 && remainder10 <= 4 && (remainder100 < 12 || remainder100 > 14)) {
    return '–≥—Ä—É–ø–ø—ã'
  }

  return '–≥—Ä—É–ø–ø'
}

function GroupsTableCard({ groups, isLoading, onClear, onDelete, columns }: GroupsTableCardProps) {
  const hasGroups = groups.length > 0

  const tableColumns = useMemo(() => columns(onDelete), [columns, onDelete])

  const subtitle = useMemo(() => {
    if (isLoading && !hasGroups) {
      return '–ú—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.'
    }

    if (hasGroups) {
      return '–ù–∏–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É –≤–æ –≤–∫–ª–∞–¥–∫–µ VK –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ –±–∞–∑—ã.'
    }

    return '–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞.'
  }, [hasGroups, isLoading])

  const clearDisabled = isLoading || !hasGroups

  let body: ReactNode

  if (isLoading && !hasGroups) {
    body = (
      <div className={styles.loadingState} aria-live="polite" aria-busy="true">
        <div className={styles.loader} />
        <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã‚Ä¶</p>
      </div>
    )
  } else if (!hasGroups) {
    body = (
      <div className={styles.emptyState} role="status">
        <div className={styles.emptyIllustration} aria-hidden="true">
          <div className={styles.emptyIcon}>üìÅ</div>
        </div>
        <h3 className={styles.emptyTitle}>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</h3>
        <p className={styles.emptyDescription}>
          –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ ‚Äî –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        </p>
      </div>
    )
  } else {
    body = (
      <div className={styles.tableContainer}>
        <Table
          columns={tableColumns}
          data={groups}
          emptyMessage="–ù–µ—Ç –≥—Ä—É–ø–ø. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞."
        />
      </div>
    )
  }

  return (
    <section className={styles.card} aria-label="–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø">
      <header className={styles.header}>
        <div className={styles.info}>
          <h2 className={styles.title}>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø</h2>
          <p className={styles.subtitle}>{subtitle}</p>
        </div>
        <div className={styles.controls}>
          <div className={styles.meta}>
            {isLoading ? (
              <span className={styles.loadingBadge}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</span>
            ) : (
              <span className={styles.counter}>
                {groups.length} {getCounterLabel(groups.length)}
              </span>
            )}
          </div>
          <div className={styles.actions}>
            <Button className={styles.filtersButton} variant="secondary" disabled>
              –§–∏–ª—å—Ç—Ä—ã (—Å–∫–æ—Ä–æ)
            </Button>
            <Button
              className={styles.clearButton}
              variant="danger"
              onClick={onClear}
              disabled={clearDisabled}
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </Button>
          </div>
        </div>
      </header>

      {body}
    </section>
  )
}

export default GroupsTableCard
