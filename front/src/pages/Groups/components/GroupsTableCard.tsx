import { useMemo } from 'react'
import type { ReactNode } from 'react'
import clsx from 'clsx'
import Button from '../../../components/Button'
import Table from '../../../components/Table'
import type { Group, TableColumn } from '../../../types'

type ColumnsFactory = (deleteGroup: (id: number) => void) => TableColumn[]

interface GroupsTableCardProps {
  groups: Group[]
  isLoading: boolean
  onClear: () => void | Promise<void>
  onDelete: (id: number) => void
  columns: ColumnsFactory
}

const getCounterLabel = (count: number) => {
  const remainder10 = count % 10
  const remainder100 = count % 100

  if (remainder10 === 1 && remainder100 !== 11) {
    return '–≥—Ä—É–ø–ø–∞'
  }

  if (remainder10 >= 2 && remainder10 <= 4 && (remainder100 < 12 || remainder100 > 14)) {
    return '–≥—Ä—É–ø–ø—ã'
  }

  return '–≥—Ä—É–ø–ø'
}

function GroupsTableCard({ groups, isLoading, onClear, onDelete, columns }: GroupsTableCardProps) {
  const hasGroups = groups.length > 0

  const tableColumns = useMemo(() => columns(onDelete), [columns, onDelete])

  const subtitle = useMemo(() => {
    if (isLoading && !hasGroups) {
      return '–ú—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.'
    }

    if (hasGroups) {
      return '–ù–∏–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É –≤–æ –≤–∫–ª–∞–¥–∫–µ VK –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ –±–∞–∑—ã.'
    }

    return '–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞.'
  }, [hasGroups, isLoading])

  const clearDisabled = isLoading || !hasGroups

  let body: ReactNode

  if (isLoading && !hasGroups) {
    body = (
      <div
        className="flex min-h-[220px] flex-col items-center justify-center gap-4 rounded-[20px] bg-background-primary p-10 text-center text-text-secondary md:p-12"
        aria-live="polite"
        aria-busy="true"
      >
        <div className="h-12 w-12 rounded-full border-4 border-[rgba(52,152,219,0.2)] border-t-[#3498db] animate-spin" />
        <p className="font-semibold text-text-primary">–ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã‚Ä¶</p>
      </div>
    )
  } else if (!hasGroups) {
    body = (
      <div
        className="flex min-h-[220px] flex-col items-center justify-center gap-4 rounded-[20px] bg-background-primary p-10 text-center text-text-secondary md:p-12"
        role="status"
      >
        <div className="grid place-items-center rounded-[30px] border border-dashed border-[rgba(52,152,219,0.35)] bg-[linear-gradient(135deg,rgba(52,152,219,0.16),rgba(52,152,219,0.04))] p-6">
          <div className="flex h-[clamp(56px,16vw,68px)] w-[clamp(56px,16vw,68px)] items-center justify-center rounded-full bg-[linear-gradient(135deg,rgba(52,152,219,0.2),rgba(52,152,219,0.05))] text-[clamp(28px,8vw,36px)] text-[#3498db]">
            üìÅ
          </div>
        </div>
        <h3 className="text-lg font-semibold text-text-primary">–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</h3>
        <p className="max-w-[420px] text-[15px] leading-relaxed">
          –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ ‚Äî –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è
          —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        </p>
      </div>
    )
  } else {
    body = (
      <div className="overflow-x-auto rounded-[20px]">
        <Table
          columns={tableColumns}
          data={groups}
          emptyMessage="–ù–µ—Ç –≥—Ä—É–ø–ø. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞."
        />
      </div>
    )
  }

  const metaBadgeClassName = 'inline-flex items-center justify-center rounded-full px-4 py-2 text-xs font-semibold uppercase tracking-[0.04em]'

  return (
    <section className="flex flex-col gap-8 rounded-[26px] border border-border bg-background-secondary p-6 shadow-[0_24px_48px_-34px_rgba(0,0,0,0.28)] md:gap-10 md:p-8 dark:shadow-[0_28px_56px_-34px_rgba(93,173,226,0.5)]" aria-label="–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø">
      <header className="flex flex-wrap items-start justify-between gap-6">
        <div className="flex min-w-[260px] flex-1 flex-col gap-2">
          <h2 className="text-2xl font-bold text-text-primary">–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø</h2>
          <p className="max-w-[640px] text-[15px] leading-relaxed text-text-secondary">{subtitle}</p>
        </div>
        <div className="flex min-w-[220px] flex-col items-end gap-3">
          <div className="flex w-full flex-wrap items-center justify-end gap-3">
            {isLoading ? (
              <span className={clsx(metaBadgeClassName, 'bg-[rgba(241,196,15,0.18)] text-[#f1c40f] dark:text-[#f9e79f]')}>
                –ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶
              </span>
            ) : (
              <span className={clsx(metaBadgeClassName, 'bg-[rgba(52,152,219,0.12)] text-[#3498db] dark:text-[#5dade2]')}>
                {groups.length} {getCounterLabel(groups.length)}
              </span>
            )}
          </div>
          <div className="flex flex-wrap justify-end gap-3">
            <Button className="min-w-[160px]" variant="secondary" disabled>
              –§–∏–ª—å—Ç—Ä—ã (—Å–∫–æ—Ä–æ)
            </Button>
            <Button className="min-w-[180px]" variant="danger" onClick={onClear} disabled={clearDisabled}>
              –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </Button>
          </div>
        </div>
      </header>

      {body}
    </section>
  )
}

export default GroupsTableCard
