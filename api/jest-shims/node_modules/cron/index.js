class CronJob {
  constructor(options) {
    if (!options || !(options.cronTime instanceof Date)) {
      throw new Error('CronJob shim requires a Date cronTime');
    }

    this.cronTime = options.cronTime;
    this.onTick = typeof options.onTick === 'function' ? options.onTick : () => {};
    this.onComplete =
      typeof options.onComplete === 'function' ? options.onComplete : () => {};
    this.unrefTimeout = Boolean(options?.unrefTimeout);
    this.running = false;
    this._timeout = null;
  }

  start() {
    if (this.running) {
      return;
    }

    this.running = true;
    const delay = Math.max(this.cronTime.getTime() - Date.now(), 0);

    this._timeout = setTimeout(() => {
      try {
        this.onTick();
      } finally {
        this.stop();
        this.onComplete();
      }
    }, delay);

    if (this.unrefTimeout && this._timeout && typeof this._timeout.unref === 'function') {
      this._timeout.unref();
    }
  }

  stop() {
    if (this._timeout) {
      clearTimeout(this._timeout);
      this._timeout = null;
    }
    this.running = false;
  }
}

module.exports = { CronJob };
