const createApiMock = () => ({
  database: {
    getRegions: jest
      .fn()
      .mockResolvedValue({ items: [], count: 0 }),
    getCities: jest
      .fn()
      .mockResolvedValue({ items: [], count: 0 }),
  },
  groups: {
    search: jest
      .fn()
      .mockResolvedValue({ items: [], count: 0 }),
    getById: jest
      .fn()
      .mockResolvedValue({ groups: [], profiles: [] }),
  },
  wall: {
    get: jest
      .fn()
      .mockResolvedValue({ items: [], profiles: [], groups: [] }),
    getById: jest
      .fn()
      .mockResolvedValue({ items: [], profiles: [], groups: [] }),
    getComments: jest
      .fn()
      .mockResolvedValue({
        items: [],
        profiles: [],
        groups: [],
        count: 0,
      }),
  },
  users: {
    get: jest.fn().mockResolvedValue([]),
  },
});

class APIError extends Error {
  constructor({ message = 'VK API error', code = 0 } = {}) {
    super(message);
    this.errorMessage = message;
    this.code = code;
  }
}

const VK = jest.fn().mockImplementation((options = {}) => ({
  options,
  api: createApiMock(),
}));

module.exports = {
  APIError,
  VK,
  __createApiMock: createApiMock,
};
