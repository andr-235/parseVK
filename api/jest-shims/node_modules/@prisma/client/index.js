const createEnum = (values) =>
  Object.freeze(
    values.reduce((acc, value) => {
      acc[value] = value;
      return acc;
    }, {}),
  );

const prismaHooks = {
  constructor: null,
  connect: null,
  disconnect: null,
};

class PrismaClient {
  constructor(config = {}) {
    this._config = config;
    this.$connect = prismaHooks.connect ?? jest.fn().mockResolvedValue(undefined);
    this.$disconnect =
      prismaHooks.disconnect ?? jest.fn().mockResolvedValue(undefined);
    this.$on = jest.fn();

    if (typeof prismaHooks.constructor === 'function') {
      prismaHooks.constructor(config);
    }
  }
}

const __setPrismaMocks = ({ constructor, connect, disconnect } = {}) => {
  prismaHooks.constructor = constructor ?? null;
  prismaHooks.connect = connect ?? null;
  prismaHooks.disconnect = disconnect ?? null;
};

const WatchlistStatus = createEnum(['ACTIVE', 'PAUSED', 'STOPPED']);
const CommentSource = createEnum(['TASK', 'WATCHLIST']);

module.exports = {
  PrismaClient,
  WatchlistStatus,
  CommentSource,
  Prisma: {
    WatchlistStatus,
    CommentSource,
  },
  __setPrismaMocks,
};
